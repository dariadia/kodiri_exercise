Return Factorial Differences
We are calculating the energy conversion efficiency coefficient to compare the new engine prototype with the approved standard. 
The new prototype's:
• output is a Fibonacci value from the same number;
• input is factorial of the given number.
• The approved standard's  ECE is given.
`Efficiency = energy output / energy input * 100%. Units are Joules (J)`
getDifference(15, 0.67) === 'The standard is more efficient';
getDifference(2, 0.27) === 'The prototype is more efficient';

function getDifference(number, standardECE) {
	let protoECE = getFibonacci(number) / getFactorial(number);
	return protoECE / standardECE > 1 ? 
		'The prototype is more efficient' :
		'The standard is more efficient';
}

function getFactorial(n, memo) {
	memo = memo || {};
	if (memo[n]) return memo[n];
	if (n === 0) return 1;
	for (let i = 0; i < n; i++) memo[n] = n * getFactorial(n - 1, memo);
	return memo[n];
}

function getFibonacci(num, memo) {
	memo = memo || {};
	if (memo[num]) return memo[num];
	if (num <= 1) return 1;
	return memo[num] = getFibonacci(num - 1, memo) 
		+ getFibonacci(num - 2, memo);
}





Get the Maximum Output
You are designing a new computer processor prototype and have several options which parts to install. You are only permitted one improvement at a time, find the combination with the greatest output.
For example, you install part 2 (that costs your system 1 Joule), then you yield the new invention's output on day 5 (for 6 Joules). The maximum output is 6-1 = 5.
getMaxOutput([7, 1, 5, 3, 6, 4]) === 5;

function getMaxOutput(capacity) {
	let minPower = Number.MAX_VALUE,
		maxOutput = 0;
	for (let i = 0; i < capacity.length; i++) {
		capacity[i] < minPower ?
			minPower = capacity[i] :
			capacity[i] - minPower > maxOutput ?
				maxOutput = capacity[i] - minPower : null;
	}
	return maxOutput;
}






Find the Same Spare Parts
You are trying to fix a memory leak. For that, you have two sets of resources available. The catch is, you cannot use the ones that have a pair (those are prepared for another project). 
• Find the single capacities in each set.
• If they are the same, return one.
• If they are different, you can switch on both at the same time, so return their sum.
getParts([6, 1, 6, 3, 1], [7, 7, 2, 0, 2]) === 3;

function getParts(set1, set2) {
let capacity1 = getSingle(set1),
		capacity2 = getSingle(set2);
	return capacity1 !== capacity2 ?
		capacity1 + capacity2 :
		capacity1;
}
function getSingle(numbers) {
	let single;
	for (let i = 0; i < numbers.length; i++) {
		single ^= numbers[i];
	}
	return single;
}




